#!/bin/python

# This is mostly intended to be used through a shell script
#Â for now, and as such is mostly a toolbox partially wrapping
# OVH API access.

import os
import sys
import ovh
import time
import glob

# Credentials can be generated from
#	https://api.ovh.com/createToken/index.cgi?GET=/*&PUT=/*&POST=/*&DELETE=/*

def readsshkey():
	dir = os.getenv('HOME')+"/.ssh/"
	keys = glob.glob(dir+"/*.pub")
	if len(keys) == 0:
		print("No SSH keys found in", dir)
		sys.exit(1)

	key = keys[0];

	for k in ["id_ed25519.pub", "id_rsa.pub"]:
		if os.path.join(dir, k) in keys:
			key = k
			break

	with open(os.path.join(dir, key), 'r') as file:
		return file.read().strip()

def readimgs(fn):
	imgs = {}
	with open(fn, 'r') as file:
		for line in filter(None, file.read().split('\n')):
			fs = line.split(' ', 2);
			imgs[fs[0]] = [fs[1], fs[2]]
	return imgs

def writeimgs(fn, imgs):
	with open(fn, 'w') as file:
		for k, v in imgs.items():
			file.write(k+" "+v[0]+" "+v[1]+"\n")

def getdebian(imgs):
	id = ""
	version = -1
	for k, v in imgs.items():
		if v[0] == "Debian":
			try:
				w = int(v[1])
				if w > version:
					version = w
					id = k
			except:
				pass
	if version == -1:
		print("No debian found in imgs")
		sys.exit(1)

	return id, version

def connect():
	return ovh.Client()

def assertvpsexists(client, vps):
	vpss = client.get('/vps')
	if vps not in vpss:
		print("Unknown VPS", vps, "knowns:", vpss)
		sys.exit(1);

def lsimgs(client, vps):
	ids = client.get('/vps/'+vps+'/images/available')
	imgs = {}
	for id in ids:
		imgs[id] = client.get('/vps/'+vps+'/images/available/'+id)['name'].split(' ', 1)
	return imgs

# TODO: for key in keys
def lskeys(client):
	keys = client.get('/me/sshKey')
	return keys

def lskey(client, keyname):
	return client.get('/me/sshKey/'+keyname)

def addkey(client, name, key):
	client.post('/me/sshKey',
		keyName=name,
		key=key,
	)

def maybeaddkey(client, name, key):
	if name not in lskeys(client):
		addkey(client, name, key)

# TODO: add timeout
def waitfortask(client, vps, id):
	done = {
		"cancelled" : True,
		"done"      : True,
		"error"     : True,
	}
	while True:
		r = client.get('/vps/'+vps+'/tasks/'+str(id))
		if r['state'] in done:
			break
		print("progress:", r['progress'])
		time.sleep(2)

def rebuildvps(client, vps, id, keyname):
	return client.post('/vps/'+vps+'/rebuild',
		doNotSendPassword=True,
		imageId=id,
	    installRTM=False,
	    sshKey=keyname,
	)['id']

if len(sys.argv) < 3:
	print(os.path.basename(sys.argv[0]), "<vps-id> <cmd=ls-imgs|get-console|ls-keys|ls-key|set-key|ls-ips|setup-debian> [key]")
	sys.exit(1)

vps = sys.argv[1]
cmd = sys.argv[2]
key = readsshkey()
if len(sys.argv) >= 4:
	key = sys.argv[3]

keyname = "ovh-do-key"

client = connect()
assertvpsexists(client, vps)

maybeaddkey(client, keyname, key)

if cmd == "ls-imgs":
	for id, name in lsimgs(client, vps).items():
		print(id, name)
elif cmd == "ls-keys":
	for k in lskeys(client):
		print(k)
elif cmd == "ls-key":
	print(lskey(client, keyname))
elif cmd == "get-console":
	print(client.post('/vps/'+vps+'/getConsoleUrl'))
elif cmd == "ls-ips":
	for ip in client.get('/vps/'+vps+'/ips'):
		print(ip)
elif cmd == "setup-debian":
	# lsimgs is a slow operation so we cache it to disk.
	fn = "/tmp/"+vps+".imgs"
	imgs = {}
	if os.path.isfile(fn):
		imgs = readimgs(fn)
	else:
		imgs = lsimgs(client, vps)
		writeimgs(fn, imgs)
	id, version = getdebian(imgs)
	print("Installing Debian", version, "("+id+") on", vps, "key:", keyname)
	waitfortask(client, vps, rebuildvps(client, vps, id, keyname))

else:
	print("Unknown command:", cmd)
	sys.exit(1)

sys.exit(0)
