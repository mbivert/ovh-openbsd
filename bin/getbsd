#!/bin/sh

set -e

tmpd=/tmp/getbsd/
mkdir -p $tmpd

# NOTE: we're not using /tmp/ so that we can run
#
#	getbsd bsd.rd > /tmp/bsd.rd
#
# Current solution is not perfect, but using /tmp/ is a
# likely use-case.
#
# For more, look at get() below and consider the following:
#	#!/bin/sh
#
#	f() {
#		x=/tmp/wat
#		echo foo > $x
#
#		mv $x $x.$$
#		echo $x.$$
#	}
#
#	y=`f`
#	cat $y
#	% sh t.sh > /tmp/wat
#	cat: /tmp/wat.3861193: input file is output file


# Default; there does not seem to be a latest link.
version=7.1
arch=amd64
mirror=https://cdn.openbsd.org
mpath=pub/OpenBSD

# OpenBSD base has a sha256(1), options aren't uniforms.
sha256=sha256sum

# Dependencies
if ! which curl    >/dev/null; then exit 1; fi
if ! which $sha256 >/dev/null; then exit 1; fi

# Input:
#	$1 : exit code
help() {
	p=`basename $0`
	cat <<EOF
NAME
	$p

SYNOPSYS
	$p [-h]
	$p [-v version] [-a arch] [-m mirror] [-p mpath] <file> [path/to/output]

DESCRIPTION
	$p downloads an OpenBSD file (e.g. bsd.rd), where:

	  version       \$version   OpenBSD version      (default: $version)
	  arch          \$arch      Architecture to use  (default: $arch)
	  mirror        \$mirror    OpenBSD mirror       (default: $mirror)
	  mpath         \$mirror    Mirror path          (default: $mpath)

	If no path/to/output is specified, resulting file is sent
	to stdout.

EOF
	exit $1
}

# Print location of downloaded bsd.rd file
#
# Input:
#	$1 : file to download
# Output:
#	Location of temporary local copy of downloaded file
get() {
	# Keep it named "bsd.rd" for checksum below
	fn=$tmpd/$1
	cs=$tmpd/SHA256

	# Mirrors are sensitive to double-/
	url=`echo $mirror/$mpath/$version/$arch/ | sed 's,//*,/,g'`

	curl -s "${url}$1"                    > $fn
	curl -s "${url}SHA256" | grep -F "$1" > $cs

	cd $tmpd; $sha256 -c $cs >/dev/null; cd - >/dev/null

	# Use temporary unique name
	mv $fn $fn.$$
	echo $fn.$$

	rm $cs
}

if [ "$1" = "-h" ] && [ "$2" = "" ]; then help 0; fi

while getopts v:a:m:p: x; do
	case "$x" in
		v) version="$OPTARG" ;;
		a) arch="$OPTARG"    ;;
		m) mirror="$OPTARG"  ;;
		p) mpath="$OPTARG"   ;;
	esac
done
shift `expr $OPTIND - 1`

if [ -z "$1" ]; then help 1; fi
in="$1"; shift

# Download; send to stdout if no output filename has been
# specified
fn=`get $in`
if [ -z "$1" ]; then
	cat $fn; rm $fn
else
	mkdir -p `dirname $1`
	mv $fn "$1"
fi
